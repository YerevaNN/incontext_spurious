{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "77e1afef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/harhrayr/projects/incontext_spurious\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/harhrayr/miniconda3/envs/incontext_spurious/lib/python3.10/site-packages/IPython/core/magics/osm.py:417: UserWarning: This is now an optional IPython functionality, setting dhist requires you to install the `pickleshare` library.\n",
      "  self.shell.db['dhist'] = compress_dhist(dhist)[-100:]\n"
     ]
    }
   ],
   "source": [
    "cd /home/harhrayr/projects/incontext_spurious"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0dd4e22e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import GPTJConfig\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "from src.datamodules.datasets.inaturalist_emb_contexts_v2 import INaturalistEmbContextsDatasetV2\n",
    "from src.models.incontext_learner_v2 import GPTJModelV2, InContextLearnerV2\n",
    "from src.utils.custom_loss_functions import ContextBNEWithLogits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "48af11ab-4b51-4be0-a5d8-6035041668e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = INaturalistEmbContextsDatasetV2(\n",
    "    dataset_path='/mnt/xtb/rafayel/data/inaturalist2017',\n",
    "    encoding_extractor='dinov2_vitb14',\n",
    "    data_length=1000,\n",
    "    class1_split='inner_train',\n",
    "    class2_split='inner_train',\n",
    "    context_class_size=10,\n",
    "    minority_group_proportion=0.2,\n",
    "    are_spurious_tokens_fixed=False,\n",
    "    are_class_tokens_fixed=True,\n",
    "    token_generation_mode='opposite',\n",
    "    spurious_setting='sum',\n",
    "    rotate_encodings=False,\n",
    "    n_rotation_matrices=None,\n",
    "    class_dependant_rotate=None,\n",
    "    saved_data_path=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8e213248-f9e1-454b-9ae1-419299a0a32d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_loader = DataLoader(dataset,\n",
    "                         batch_size=8,\n",
    "                         num_workers=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "754cd9e1-e7b8-4a3e-96ee-8f81534df08f",
   "metadata": {},
   "outputs": [],
   "source": [
    "ret = None\n",
    "for ret in data_loader:\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a60d79fc-0605-4edd-bd66-96975b662691",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([8, 60, 768])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ret[0].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "82533599-cab8-4c22-b2ea-ce76ae2441a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([8, 20, 3])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ret[1].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "42f8252d-3adb-405a-b321-f0513e0a4430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([8, 20, 3])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ret[2].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "36c52262-715a-42c6-9e95-b1b99664bd8e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4c9cc094-7334-405b-a616-19bcbe7b8341",
   "metadata": {},
   "outputs": [],
   "source": [
    "config = GPTJConfig(\n",
    "    n_positions=512,\n",
    "    n_embd=768,\n",
    "    n_layer=6,\n",
    "    n_head=8,\n",
    "    n_inner=3072,  # Adjusted as per convention: 4 * n_embd\n",
    "    resid_pdrop=0.0,\n",
    "    embd_pdrop=0.0,\n",
    "    attn_pdrop=0.0,\n",
    "    use_cache=False,\n",
    ")\n",
    "\n",
    "network = GPTJModelV2(config=config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "751885b6-1cf8-4a4b-8b2b-c8e68498e521",
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_fn = ContextBNEWithLogits(query_loss_weight=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "77b2e40f-6456-4e72-95e7-1da569e3ee3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "icl_learner = InContextLearnerV2(\n",
    "    network=network,\n",
    "    loss_fn=loss_fn,\n",
    "    val_sets=[],\n",
    "    spurious_setting='sum',\n",
    "    dataset_name='inaturalist2017',\n",
    "    optimizer_conf = None,\n",
    "    scheduler_conf = None,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "82ed7f5e-cd87-4b5a-a4d2-69ecd4a378e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InContextLearnerV2(\n",
       "  (_network): GPTJModelV2(\n",
       "    (wte): Embedding(50400, 768)\n",
       "    (drop): Dropout(p=0.0, inplace=False)\n",
       "    (h): ModuleList(\n",
       "      (0-5): 6 x GPTJBlock(\n",
       "        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n",
       "        (attn): GPTJAttention(\n",
       "          (attn_dropout): Dropout(p=0.0, inplace=False)\n",
       "          (resid_dropout): Dropout(p=0.0, inplace=False)\n",
       "          (k_proj): Linear(in_features=768, out_features=768, bias=False)\n",
       "          (v_proj): Linear(in_features=768, out_features=768, bias=False)\n",
       "          (q_proj): Linear(in_features=768, out_features=768, bias=False)\n",
       "          (out_proj): Linear(in_features=768, out_features=768, bias=False)\n",
       "        )\n",
       "        (mlp): GPTJMLP(\n",
       "          (fc_in): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (fc_out): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (act): NewGELUActivation()\n",
       "          (dropout): Dropout(p=0.0, inplace=False)\n",
       "        )\n",
       "      )\n",
       "    )\n",
       "    (ln_f): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n",
       "  )\n",
       "  (_fc): Linear(in_features=768, out_features=1, bias=True)\n",
       "  (_loss_fn): ContextBNEWithLogits(\n",
       "    (_bne): BCEWithLogitsLoss()\n",
       "  )\n",
       "  (train_accuracy): BinaryAccuracy()\n",
       "  (train_accuracy_minority): MinorityMajorityAccuracy()\n",
       "  (train_accuracy_majority): MinorityMajorityAccuracy()\n",
       "  (val_accuracy): BinaryAccuracy()\n",
       "  (val_accuracy_minority): MinorityMajorityAccuracy()\n",
       "  (val_accuracy_majority): MinorityMajorityAccuracy()\n",
       ")"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "icl_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9dcb5a9c-c2ab-4268-9c78-d98c0b735900",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/harhrayr/miniconda3/envs/incontext_spurious/lib/python3.10/site-packages/pytorch_lightning/core/module.py:420: You are trying to `self.log()` but the `self.trainer` reference is not registered on the model yet. This is most likely because the model hasn't been passed to the `Trainer`\n"
     ]
    }
   ],
   "source": [
    "loss = icl_learner.training_step(ret)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "873ce463-f619-4f90-92bd-38160c7b681b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.7383, grad_fn=<AddBackward0>)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e76d5a12-84c5-430c-9047-c88704befea6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
